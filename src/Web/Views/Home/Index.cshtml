@{
    ViewBag.Title = "Home Page";

    var workItemGrid = new WebGrid(canPage: true, rowsPerPage: ViewBag.PageSize);
    workItemGrid.Bind(ViewBag.WorkItems, rowCount: ViewBag.WorkItemCount, autoSortAndPage: false);
    workItemGrid.Pager(WebGridPagerModes.NextPrevious);
}

<div>@ViewBag.WorkItemCount Work Items.</div>

@workItemGrid.GetHtml(
    htmlAttributes: new { id = "workItemGrid" },
    rowStyle: "table_row",
    alternatingRowStyle: "table_row",
    selectedRowStyle: "table_row",

    columns: workItemGrid.Columns(
        workItemGrid.Column("Id"),
        workItemGrid.Column("Title"),
        workItemGrid.Column("Description"),
        workItemGrid.Column("Created Date", format: item => item.CreatedDate.ToString("dd MMM yyyy"))
    )
)

<button onclick="javascript: location.reload();" class="ui-button ui-widget ui-state-default ui-corner-all ui-button-text-only"><span class="ui-button-text">Refresh</span></button>
<button id="addWorkItemButton" class="ui-button ui-widget ui-state-default ui-corner-all ui-button-text-only"><span class="ui-button-text">Add Work Item</span></button>

<!-- Dialog for details view of a Work Item - including editing values and adding comments -->
<div id="dialog-form" title="Work Item Details">
    <table id="workItemDetails">
		<tbody>
			<tr>
				<td><label for="id">Id</label></td>
				<td><input type="text" name="id" id="id" disabled="disabled" data-bind="value: Id" /></td>
			</tr>
			<tr>
				<td><label for="title">Title</label></td>
				<td><input type="text" name="title" id="title" data-bind="value: Title" /></td>
			</tr>
			<tr>
				<td><label for="description">Description</label></td>
				<td><input type="text" name="description" id="description" data-bind="value: Description" /></td>
			</tr>
			<tr>
				<td><label for="createdDate">Created Date</label></td>
				<td><input type="text" name="createdDate" id="createdDate" disabled="disabled" data-bind="value: CreatedDate" /></td>
			</tr>
			<tr>
				<td><label for="comment">Comment</label></td>
				<td><input type="text" name="comment" id="comment" data-bind="value: AddedComment" /></td>
			</tr>
		</tbody>
	</table>

    <br />

    <div data-bind='template: "commentTemplate"' />
    <script id='commentTemplate' type='text/html'>

        <table id="workItemComments">
            <thead>
                <tr>
                    <td>Comment</td>
                    <td>User</td>
                    <td>Date</td>
                </tr>
            </thead>
		    <tbody>

            {{each Comments()}}
			<tr>
				<td>${ Text }</td>
				<td>${ User }</td>
				<td>${ AddedDate }</td>
			</tr>
            {{/each}}

		    </tbody>
	    </table>

    </script>

</div>

<script type="text/javascript">
    $(function () {
        var allTableRows = $("#workItemGrid tbody tr");
        var addWorkItemButton = $("#addWorkItemButton");

        // Define the view model for the Work Item details view
        var viewModel = {
            Id: null,
            Title: null,
            Description: null,
            CreatedDate: null,
            AddedComment: null,
            Comments: null,

            // Bind a work item to the view model
            bind: function (workItem) {
                this.Id = ko.observable(workItem.Id);
                this.Title = ko.observable(workItem.Title);
                this.Description = ko.observable(workItem.Description);
                this.CreatedDate = ko.observable(workItem.CreatedDate);
                this.AddedComment = ko.observable("");
                this.Comments = ko.observableArray(workItem.comments);
            },

            // Reset the view model
            reset: function () {
                this.Id = ko.observable("");
                this.Title = ko.observable("");
                this.Description = ko.observable("");
                this.CreatedDate = ko.observable(new Date());
                this.AddedComment = ko.observable("");
                this.Comments = ko.observableArray();
            },

            // Save a new or updated work item from the view model
            save: function () {
                $.ajax({
                    url: '/WorkItem/Save',
                    type: 'POST',
                    data: ko.toJSON(this),
                    contentType: "application/json; charset=utf-8",
                    dataType: "json"
                });
            }
        };

        $("#dialog-form").dialog({
            autoOpen: false,
            height: 500,
            width: 700,
            modal: true,
            buttons: {
                OK: function () {
                    viewModel.save();
                    $(this).dialog("close");
                },
                Cancel: function () {
                    $(this).dialog("close");
                }
            }
        });

        // Bind the click event to each table row to load the work item and open the modal dialog
        allTableRows.click(function () {
            var workItemId = $(this).children().first().text();

            $.ajax({
                url: '/WorkItem/Get',
                type: 'GET',
                data: ({ id: workItemId }),
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (data) {
                    // get the result and bind with knockout
                    viewModel.bind(data);

                    ko.applyBindings(viewModel);

                    $("#dialog-form").dialog("open");
                }
            });

        });

        // Bind the click event to the add button to open the a blank modal dialog
        addWorkItemButton.click(function () {
            viewModel.reset();
            ko.applyBindings(viewModel);
            $("#dialog-form").dialog("open");
        });
    });
</script>
